#!/usr/bin/env node

/**
 * Script de verificaci√≥n del sistema de im√°genes mejorado
 * Verifica que todos los componentes est√©n correctamente implementados
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç Verificando implementaci√≥n del sistema de im√°genes...\n');

// Archivos que deben existir
const requiredFiles = [
  'lib/imageUploadService.ts',
  'lib/fallbackImageService.ts',
  'lib/imagekitConnectivityTest.ts',
  'components/ImageUploadDiagnostic.tsx',
  'components/DatabaseDiagnostic.tsx',
  'data/migrations/fix_profiles_created_at.ts'
];

// Verificaciones de contenido
const contentChecks = [
  {
    file: 'lib/imageUploadService.ts',
    checks: [
      'fallbackImageService',
      'method.*imagekit.*local.*base64'
    ]
  },
  {
    file: 'store/useCurrentUser.ts',
    checks: [
      'createdAt.*new Date.*toISOString',
      'updatedAt.*new Date.*toISOString'
    ]
  },
  {
    file: 'screens/Profile/ProfileScreen.tsx',
    checks: [
      'ImageUploadDiagnostic',
      'DatabaseDiagnostic',
      'isFallbackImage'
    ]
  },
  {
    file: 'data/db.ts',
    checks: [
      'fixProfilesCreatedAt',
      'getDatabase.*SQLiteDatabase'
    ]
  }
];

let allPassed = true;

// Verificar archivos requeridos
console.log('üìÅ Verificando archivos requeridos...');
requiredFiles.forEach(file => {
  const filePath = path.join(__dirname, '..', file);
  if (fs.existsSync(filePath)) {
    console.log(`  ‚úÖ ${file}`);
  } else {
    console.log(`  ‚ùå ${file} - FALTANTE`);
    allPassed = false;
  }
});

console.log('\nüìã Verificando contenido de archivos...');

// Verificar contenido
contentChecks.forEach(check => {
  const filePath = path.join(__dirname, '..', check.file);
  if (!fs.existsSync(filePath)) {
    console.log(`  ‚ùå ${check.file} - Archivo no encontrado`);
    allPassed = false;
    return;
  }
  
  const content = fs.readFileSync(filePath, 'utf8');
  
  check.checks.forEach(pattern => {
    const regex = new RegExp(pattern, 'i');
    if (regex.test(content)) {
      console.log(`  ‚úÖ ${check.file} - Contiene: ${pattern}`);
    } else {
      console.log(`  ‚ùå ${check.file} - Falta: ${pattern}`);
      allPassed = false;
    }
  });
});

console.log('\nüîß Verificando configuraci√≥n de ImageKit...');
const imagekitPath = path.join(__dirname, '..', 'constants/imagekit.ts');
if (fs.existsSync(imagekitPath)) {
  const content = fs.readFileSync(imagekitPath, 'utf8');
  if (content.includes('IMAGEKIT_CONFIG') && content.includes('PRIVATE_KEY') && content.includes('URL_ENDPOINT')) {
    console.log('  ‚úÖ Configuraci√≥n de ImageKit encontrada');
  } else {
    console.log('  ‚ö†Ô∏è Configuraci√≥n de ImageKit incompleta');
    allPassed = false;
  }
} else {
  console.log('  ‚ùå Archivo de configuraci√≥n de ImageKit no encontrado');
  allPassed = false;
}

console.log('\nüìä Resultado de la verificaci√≥n:');
if (allPassed) {
  console.log('‚úÖ Sistema de im√°genes implementado correctamente');
  console.log('\nüéØ Funcionalidades disponibles:');
  console.log('  ‚Ä¢ Subida de im√°genes a ImageKit');
  console.log('  ‚Ä¢ Respaldo local autom√°tico');
  console.log('  ‚Ä¢ Respaldo base64 como √∫ltimo recurso');
  console.log('  ‚Ä¢ Diagn√≥stico de conectividad');
  console.log('  ‚Ä¢ Diagn√≥stico de base de datos');
  console.log('  ‚Ä¢ Correcci√≥n autom√°tica de errores');
  console.log('  ‚Ä¢ Manejo robusto de errores');
  
  console.log('\nüöÄ Para probar el sistema:');
  console.log('  1. Abre la app');
  console.log('  2. Ve a ProfileScreen');
  console.log('  3. Usa "Cambiar foto" para seleccionar una imagen');
  console.log('  4. Usa los componentes de diagn√≥stico para verificar el estado');
  
} else {
  console.log('‚ùå Hay problemas en la implementaci√≥n');
  console.log('Revisa los errores mostrados arriba y corrige los archivos faltantes');
}

console.log('\n‚ú® Verificaci√≥n completada');
