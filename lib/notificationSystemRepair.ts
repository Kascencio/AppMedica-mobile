import * as Notifications from 'expo-notifications';
import { Platform, Alert } from 'react-native';
import * as Device from 'expo-device';
import { scheduleMedicationReminder, getScheduledNotifications, cancelAllNotifications, requestPermissions } from './notifications';
import { setupNotificationChannels, checkNotificationChannels } from './notificationChannels';

/**
 * Sistema completo de reparaci√≥n de notificaciones
 */
export class NotificationSystemRepair {
  private static instance: NotificationSystemRepair;
  
  public static getInstance(): NotificationSystemRepair {
    if (!NotificationSystemRepair.instance) {
      NotificationSystemRepair.instance = new NotificationSystemRepair();
    }
    return NotificationSystemRepair.instance;
  }

  /**
   * Diagn√≥stico completo del sistema
   */
  async diagnoseSystem(): Promise<{
    device: string;
    permissions: string;
    channels: string;
    scheduled: number;
    testResult: string;
    issues: string[];
    recommendations: string[];
  }> {
    const result = {
      device: '',
      permissions: '',
      channels: '',
      scheduled: 0,
      testResult: '',
      issues: [] as string[],
      recommendations: [] as string[]
    };

    try {
      console.log('üîß [NotificationRepair] Iniciando diagn√≥stico completo...');

      // 1. Verificar dispositivo
      result.device = Device.isDevice ? 'Dispositivo f√≠sico' : 'Simulador';
      if (!Device.isDevice) {
        result.issues.push('Ejecut√°ndose en simulador - las notificaciones pueden no funcionar');
        result.recommendations.push('Probar en dispositivo f√≠sico');
      }

      // 2. Verificar permisos
      const { status } = await Notifications.getPermissionsAsync();
      result.permissions = status;
      
      if (status !== 'granted') {
        result.issues.push('Permisos de notificaci√≥n no concedidos');
        result.recommendations.push('Solicitar permisos de notificaci√≥n');
      }

      // 3. Verificar canales (Android)
      if (Platform.OS === 'android') {
        const channels = await checkNotificationChannels();
        result.channels = `Canales: ${channels.length}`;
        
        if (channels.length === 0) {
          result.issues.push('No hay canales de notificaci√≥n configurados');
          result.recommendations.push('Configurar canales de notificaci√≥n');
        }
      } else {
        result.channels = 'iOS - No aplica';
      }

      // 4. Verificar notificaciones programadas
      const scheduled = await getScheduledNotifications();
      result.scheduled = scheduled.length;
      
      if (scheduled.length === 0) {
        result.issues.push('No hay notificaciones programadas');
        result.recommendations.push('Programar algunas alarmas de prueba');
      }

      // 5. Prueba de programaci√≥n
      try {
        const testTime = new Date();
        testTime.setMinutes(testTime.getMinutes() + 2);
        const timeString = testTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false });

        await scheduleMedicationReminder({
          id: 'repair_test_' + Date.now(),
          name: 'Prueba de Reparaci√≥n',
          dosage: '1mg',
          time: timeString,
          frequency: 'daily',
          patientProfileId: 'test'
        });

        result.testResult = '‚úÖ Prueba de programaci√≥n exitosa';
        console.log('üîß [NotificationRepair] Prueba de programaci√≥n exitosa');

        // Limpiar la prueba despu√©s de 5 segundos
        setTimeout(async () => {
          try {
            await cancelAllNotifications();
            console.log('üîß [NotificationRepair] Prueba de notificaci√≥n limpiada');
          } catch (error) {
            console.error('üîß [NotificationRepair] Error limpiando prueba:', error);
          }
        }, 5000);

      } catch (error) {
        result.testResult = `‚ùå Error: ${error instanceof Error ? error.message : String(error)}`;
        result.issues.push('Error en programaci√≥n de notificaciones');
        result.recommendations.push('Revisar configuraci√≥n de notificaciones');
        console.error('üîß [NotificationRepair] Error en prueba:', error);
      }

      // 6. Recomendaciones adicionales
      if (Platform.OS === 'android') {
        result.recommendations.push('Verificar optimizaci√≥n de bater√≠a para RecuerdaMed');
        result.recommendations.push('Verificar que el modo "No molestar" est√© desactivado');
        result.recommendations.push('Verificar permisos de "Alarmas exactas" en configuraci√≥n');
      }

      console.log('üîß [NotificationRepair] Diagn√≥stico completado:', result);
      return result;

    } catch (error) {
      console.error('üîß [NotificationRepair] Error en diagn√≥stico:', error);
      result.testResult = `‚ùå Error cr√≠tico: ${error instanceof Error ? error.message : String(error)}`;
      result.issues.push('Error cr√≠tico en el sistema');
      result.recommendations.push('Reiniciar la aplicaci√≥n');
      return result;
    }
  }

  /**
   * Reparar el sistema de notificaciones
   */
  async repairSystem(): Promise<{
    success: boolean;
    steps: string[];
    errors: string[];
  }> {
    const result = {
      success: false,
      steps: [] as string[],
      errors: [] as string[]
    };

    try {
      console.log('üîß [NotificationRepair] Iniciando reparaci√≥n del sistema...');

      // Paso 1: Reparar permisos
      try {
        result.steps.push('1. Reparando permisos de notificaci√≥n...');
        const permissionsGranted = await requestPermissions();
        if (permissionsGranted) {
          result.steps.push('‚úÖ Permisos reparados correctamente');
        } else {
          result.errors.push('No se pudieron obtener permisos de notificaci√≥n');
          result.steps.push('‚ùå Error obteniendo permisos');
        }
      } catch (error) {
        result.errors.push(`Error reparando permisos: ${error}`);
        result.steps.push('‚ùå Error en reparaci√≥n de permisos');
      }

      // Paso 2: Reparar canales (Android)
      if (Platform.OS === 'android') {
        try {
          result.steps.push('2. Reparando canales de notificaci√≥n...');
          const channelsSetup = await setupNotificationChannels();
          if (channelsSetup) {
            result.steps.push('‚úÖ Canales reparados correctamente');
          } else {
            result.errors.push('Error configurando canales de notificaci√≥n');
            result.steps.push('‚ùå Error configurando canales');
          }
        } catch (error) {
          result.errors.push(`Error reparando canales: ${error}`);
          result.steps.push('‚ùå Error en reparaci√≥n de canales');
        }
      }

      // Paso 3: Limpiar notificaciones corruptas
      try {
        result.steps.push('3. Limpiando notificaciones corruptas...');
        await cancelAllNotifications();
        result.steps.push('‚úÖ Notificaciones limpiadas');
      } catch (error) {
        result.errors.push(`Error limpiando notificaciones: ${error}`);
        result.steps.push('‚ùå Error limpiando notificaciones');
      }

      // Paso 4: Probar programaci√≥n
      try {
        result.steps.push('4. Probando programaci√≥n de notificaciones...');
        const testTime = new Date();
        testTime.setMinutes(testTime.getMinutes() + 3);
        const timeString = testTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false });

        await scheduleMedicationReminder({
          id: 'repair_test_final_' + Date.now(),
          name: 'Prueba Final de Reparaci√≥n',
          dosage: '1mg',
          time: timeString,
          frequency: 'daily',
          patientProfileId: 'test'
        });

        result.steps.push('‚úÖ Programaci√≥n de prueba exitosa');
        
        // Limpiar la prueba despu√©s de 10 segundos
        setTimeout(async () => {
          try {
            await cancelAllNotifications();
            console.log('üîß [NotificationRepair] Prueba final limpiada');
          } catch (error) {
            console.error('üîß [NotificationRepair] Error limpiando prueba final:', error);
          }
        }, 10000);

      } catch (error) {
        result.errors.push(`Error en prueba de programaci√≥n: ${error}`);
        result.steps.push('‚ùå Error en prueba de programaci√≥n');
      }

      // Determinar si la reparaci√≥n fue exitosa
      result.success = result.errors.length === 0;

      if (result.success) {
        result.steps.push('üéâ Sistema de notificaciones reparado exitosamente');
      } else {
        result.steps.push('‚ö†Ô∏è Reparaci√≥n completada con errores');
      }

      console.log('üîß [NotificationRepair] Reparaci√≥n completada:', result);
      return result;

    } catch (error) {
      console.error('üîß [NotificationRepair] Error cr√≠tico en reparaci√≥n:', error);
      result.errors.push(`Error cr√≠tico: ${error}`);
      result.steps.push('‚ùå Error cr√≠tico en reparaci√≥n');
      return result;
    }
  }

  /**
   * Mostrar resultados del diagn√≥stico
   */
  showDiagnosticResults(results: any) {
    const message = `
üîç DIAGN√ìSTICO DEL SISTEMA DE NOTIFICACIONES

üì± Dispositivo: ${results.device}
üîê Permisos: ${results.permissions}
üì¢ Canales: ${results.channels}
‚è∞ Programadas: ${results.scheduled}
üß™ Prueba: ${results.testResult}

${results.issues.length > 0 ? `
‚ùå PROBLEMAS DETECTADOS:
${results.issues.map((issue, i) => `${i + 1}. ${issue}`).join('\n')}
` : ''}

${results.recommendations.length > 0 ? `
üìã RECOMENDACIONES:
${results.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}
` : '‚úÖ Sistema funcionando correctamente'}
    `;

    Alert.alert('Diagn√≥stico de Notificaciones', message, [
      { text: 'OK' }
    ]);
  }

  /**
   * Mostrar resultados de la reparaci√≥n
   */
  showRepairResults(results: any) {
    const message = `
üîß REPARACI√ìN DEL SISTEMA DE NOTIFICACIONES

${results.success ? '‚úÖ REPARACI√ìN EXITOSA' : '‚ö†Ô∏è REPARACI√ìN CON ERRORES'}

PASOS EJECUTADOS:
${results.steps.map((step, i) => `${i + 1}. ${step}`).join('\n')}

${results.errors.length > 0 ? `
‚ùå ERRORES:
${results.errors.map((error, i) => `${i + 1}. ${error}`).join('\n')}
` : ''}
    `;

    Alert.alert(
      results.success ? 'Reparaci√≥n Exitosa' : 'Reparaci√≥n con Errores', 
      message, 
      [
        { text: 'OK' }
      ]
    );
  }

  /**
   * Ejecutar diagn√≥stico completo y mostrar resultados
   */
  async runFullDiagnostic() {
    try {
      const results = await this.diagnoseSystem();
      this.showDiagnosticResults(results);
      return results;
    } catch (error) {
      console.error('üîß [NotificationRepair] Error ejecutando diagn√≥stico:', error);
      Alert.alert('Error', 'Error ejecutando diagn√≥stico de notificaciones');
      return null;
    }
  }

  /**
   * Ejecutar reparaci√≥n completa y mostrar resultados
   */
  async runFullRepair() {
    try {
      const results = await this.repairSystem();
      this.showRepairResults(results);
      return results;
    } catch (error) {
      console.error('üîß [NotificationRepair] Error ejecutando reparaci√≥n:', error);
      Alert.alert('Error', 'Error ejecutando reparaci√≥n de notificaciones');
      return null;
    }
  }
}

// Instancia singleton
export const notificationRepair = NotificationSystemRepair.getInstance();
