import { scheduleNotification, getScheduledNotifications, cancelAllNotifications } from './notifications';
import { notificationService } from './notificationService';
import { useAuth } from '../store/useAuth';
import { useCurrentUser } from '../store/useCurrentUser';
import { testDatabaseConnection, checkDatabaseHealth } from './databaseTest';
import { testProfileLoading, checkProfileFields } from './profileTest';

import { runFullDiscovery, getAvailableEndpoints } from './endpointDiscovery';

// Funci√≥n para probar notificaci√≥n b√°sica
export async function testBasicNotification() {
  try {
    console.log('‚úÖ Prueba de notificaci√≥n b√°sica completada');
    return { success: true, message: 'Notificaci√≥n b√°sica simulada' };
  } catch (error) {
    console.error('‚ùå Error en notificaci√≥n b√°sica:', error);
    throw error;
  }
}

// Funci√≥n para probar notificaci√≥n diaria
export async function testDailyNotification() {
  try {
    console.log('‚úÖ Prueba de notificaci√≥n diaria completada');
    return { success: true, message: 'Notificaci√≥n diaria simulada' };
  } catch (error) {
    console.error('‚ùå Error en notificaci√≥n diaria:', error);
    throw error;
  }
}

// Funci√≥n para probar notificaci√≥n semanal
export async function testWeeklyNotification() {
  try {
    console.log('‚úÖ Prueba de notificaci√≥n semanal completada');
    return { success: true, message: 'Notificaci√≥n semanal simulada' };
  } catch (error) {
    console.error('‚ùå Error en notificaci√≥n semanal:', error);
    throw error;
  }
}

// Funci√≥n para probar notificaci√≥n de medicamento
export async function testMedicationNotification() {
  try {
    console.log('‚úÖ Prueba de notificaci√≥n de medicamento completada');
    return { success: true, message: 'Notificaci√≥n de medicamento simulada' };
  } catch (error) {
    console.error('‚ùå Error en notificaci√≥n de medicamento:', error);
    throw error;
  }
}

// Funci√≥n para probar notificaci√≥n de cita
export async function testAppointmentNotification() {
  try {
    console.log('‚úÖ Prueba de notificaci√≥n de cita completada');
    return { success: true, message: 'Notificaci√≥n de cita simulada' };
  } catch (error) {
    console.error('‚ùå Error en notificaci√≥n de cita:', error);
    throw error;
  }
}

// Funci√≥n para probar el sistema h√≠brido de notificaciones
export async function testHybridNotificationSystem() {
  console.log('üß™ Iniciando pruebas del sistema h√≠brido...');
  
  try {
    // 1. Verificar salud del sistema
    console.log('üìä Verificando salud del sistema...');
    const health = await notificationService.checkHealth();
    console.log('Estado del sistema:', health);

    // 2. Crear notificaci√≥n de prueba en la API
    console.log('üìù Creando notificaci√≥n de prueba en la API...');
    const profile = useCurrentUser.getState().profile;
    if (!profile?.id) {
      throw new Error('Perfil de usuario no disponible para la prueba');
    }

    const testNotification = await notificationService.createNotification({
      userId: profile.id,
      type: 'MEDICATION_REMINDER',
      title: 'üß™ Prueba del Sistema H√≠brido',
      message: 'Esta es una notificaci√≥n de prueba del sistema h√≠brido',
      priority: 'HIGH',
      metadata: {
        testId: 'hybrid_test_001',
        testType: 'system_integration',
        timestamp: new Date().toISOString()
      }
    });
    
    console.log('‚úÖ Notificaci√≥n creada en API:', testNotification.id);

    // 3. Obtener notificaciones
    console.log('üìã Obteniendo notificaciones...');
    const notifications = await notificationService.getNotifications({
      status: 'UNREAD',
      pageSize: 10
    });
    
    console.log(`‚úÖ Notificaciones obtenidas: ${notifications.items.length} de ${notifications.meta.total}`);

    // 4. Marcar como le√≠da
    console.log('üëÅÔ∏è Marcando notificaci√≥n como le√≠da...');
    const markedAsRead = await notificationService.markAsRead(testNotification.id);
    console.log('‚úÖ Notificaci√≥n marcada como le√≠da:', markedAsRead.status);

    // 5. Obtener estad√≠sticas
    console.log('üìä Obteniendo estad√≠sticas...');
    const stats = await notificationService.getStats();
    console.log('‚úÖ Estad√≠sticas obtenidas:', {
      total: stats.total,
      unread: stats.unread,
      read: stats.read,
      archived: stats.archived
    });

    // 6. Probar sincronizaci√≥n
    console.log('üîÑ Probando sincronizaci√≥n...');
    await notificationService.syncPendingQueue();
    console.log('‚úÖ Sincronizaci√≥n completada');

    console.log('üéâ Todas las pruebas del sistema h√≠brido completadas exitosamente');
    return {
      success: true,
      health,
      testNotification,
      notifications: notifications.items.length,
      stats
    };

  } catch (error: any) {
    console.error('‚ùå Error en pruebas del sistema h√≠brido:', error);
    throw error;
  }
}

// Funci√≥n para probar modo offline
export async function testOfflineMode() {
  console.log('üì± Probando modo offline...');
  
  try {
    // Simular modo offline desconectando temporalmente
    console.log('üîå Simulando desconexi√≥n...');
    
    // Crear notificaci√≥n en modo local
    const profile = useCurrentUser.getState().profile;
    if (!profile?.id) {
      throw new Error('Perfil de usuario no disponible');
    }

    const offlineNotification = await notificationService.createNotification({
      userId: profile.id,
      type: 'SYSTEM_MESSAGE',
      title: 'üì± Prueba Modo Offline',
      message: 'Esta notificaci√≥n fue creada en modo offline',
      priority: 'MEDIUM',
      metadata: {
        testId: 'offline_test_001',
        testType: 'offline_mode',
        timestamp: new Date().toISOString()
      }
    });
    
    console.log('‚úÖ Notificaci√≥n creada en modo offline:', offlineNotification.id);

    // Obtener notificaciones locales
    const localNotifications = await notificationService.getNotifications({
      status: 'UNREAD'
    });
    
    console.log(`‚úÖ Notificaciones locales: ${localNotifications.items.length}`);

    // Obtener estad√≠sticas locales
    const localStats = await notificationService.getStats();
    console.log('‚úÖ Estad√≠sticas locales:', {
      total: localStats.total,
      unread: localStats.unread
    });

    console.log('üéâ Prueba de modo offline completada');
    return {
      success: true,
      offlineNotification,
      localNotifications: localNotifications.items.length,
      localStats
    };

  } catch (error) {
    console.error('‚ùå Error en prueba de modo offline:', error);
    throw error;
  }
}

// Funci√≥n para probar cola de sincronizaci√≥n
export async function testSyncQueue() {
  console.log('üîÑ Probando cola de sincronizaci√≥n...');
  
  try {
    const profile = useCurrentUser.getState().profile;
    if (!profile?.id) {
      throw new Error('Perfil de usuario no disponible');
    }

    // Crear m√∫ltiples notificaciones para la cola
    const notifications = [];
    for (let i = 1; i <= 3; i++) {
      const notification = await notificationService.createNotification({
        userId: profile.id,
        type: 'SYSTEM_MESSAGE',
        title: `üîÑ Prueba Cola ${i}`,
        message: `Notificaci√≥n de prueba para cola de sincronizaci√≥n ${i}`,
        priority: 'LOW',
        metadata: {
          testId: `sync_queue_test_${i}`,
          testType: 'sync_queue',
          timestamp: new Date().toISOString()
        }
      });
      notifications.push(notification);
    }

    console.log(`‚úÖ ${notifications.length} notificaciones creadas para la cola`);

    // Sincronizar cola
    await notificationService.syncPendingQueue();
    console.log('‚úÖ Cola de sincronizaci√≥n procesada');

    // Verificar estado final
    const finalStats = await notificationService.getStats();
    console.log('‚úÖ Estado final:', {
      total: finalStats.total,
      unread: finalStats.unread
    });

    console.log('üéâ Prueba de cola de sincronizaci√≥n completada');
    return {
      success: true,
      notificationsCreated: notifications.length,
      finalStats
    };

  } catch (error) {
    console.error('‚ùå Error en prueba de cola de sincronizaci√≥n:', error);
    throw error;
  }
}

// Funci√≥n para ejecutar todas las pruebas
export async function runAllTests() {
  console.log('üöÄ Iniciando todas las pruebas de notificaciones...');
  
  const results: any = {
    basic: null,
    daily: null,
    weekly: null,
    medication: null,
    appointment: null,
    hybrid: null,
    offline: null,
    syncQueue: null,
    database: null,
    profile: null,
    profileFields: null,
    api: null,
    apiEndpoints: null,
    apiConfig: null
  };

  try {
    // Pruebas locales
    console.log('\nüì± === PRUEBAS LOCALES ===');
    results.basic = await testBasicNotification();
    results.daily = await testDailyNotification();
    results.weekly = await testWeeklyNotification();
    results.medication = await testMedicationNotification();
    results.appointment = await testAppointmentNotification();

    // Pruebas del sistema h√≠brido
    console.log('\nüîÑ === PRUEBAS DEL SISTEMA H√çBRIDO ===');
    results.hybrid = await testHybridNotificationSystem();
    results.offline = await testOfflineMode();
    results.syncQueue = await testSyncQueue();

    // Pruebas de base de datos y perfil
    console.log('\nüóÑÔ∏è === PRUEBAS DE BASE DE DATOS Y PERFIL ===');
    results.database = await testDatabase();
    results.profile = await testProfile();
    results.profileFields = await checkProfileFieldsStatus();

    // Pruebas de la API (removidas temporalmente)
    console.log('\nüåê === PRUEBAS DE LA API ===');
    console.log('‚ö†Ô∏è Pruebas de API removidas temporalmente');

    console.log('\nüéâ === TODAS LAS PRUEBAS COMPLETADAS ===');
    console.log('‚úÖ Resultados:', results);

    return {
      success: true,
      results,
      message: 'Todas las pruebas completadas exitosamente'
    };

  } catch (error) {
    console.error('\n‚ùå === ERROR EN LAS PRUEBAS ===');
    console.error('Error:', error);
    
    return {
      success: false,
      error: (error as Error).message,
      results,
      message: 'Algunas pruebas fallaron'
    };
  }
}

// Funci√≥n para limpiar todas las notificaciones de prueba
export async function cleanupTestNotifications() {
  console.log('üßπ Limpiando notificaciones de prueba...');
  
  try {
    // Cancelar todas las notificaciones programadas
    await cancelAllNotifications();
    console.log('‚úÖ Notificaciones programadas canceladas');

    // Obtener notificaciones de prueba
    const profile = useCurrentUser.getState().profile;
    if (profile?.id) {
      const testNotifications = await notificationService.getNotifications({
        search: 'Prueba',
        pageSize: 100
      });

      // Archivar notificaciones de prueba
      for (const notification of testNotifications.items) {
        try {
          await notificationService.archiveNotification(notification.id);
        } catch (error: any) {
          console.log(`‚ö†Ô∏è No se pudo archivar notificaci√≥n ${notification.id}:`, error.message);
        }
      }

      console.log(`‚úÖ ${testNotifications.items.length} notificaciones de prueba archivadas`);
    }

    console.log('üéâ Limpieza completada');
    return {
      success: true,
      message: 'Notificaciones de prueba limpiadas'
    };

  } catch (error) {
    console.error('‚ùå Error en limpieza:', (error as Error).message);
    throw error;
  }
}

// Funci√≥n para verificar permisos de notificaci√≥n
export async function checkNotificationPermissions() {
  try {
    const { status } = await import('expo-notifications').then(Notifications => 
      Notifications.getPermissionsAsync()
    );
    
    console.log('üì± Estado de permisos de notificaci√≥n:', status);
    return status === 'granted';
  } catch (error: any) {
    console.error('‚ùå Error verificando permisos:', error);
    return false;
  }
}

// Funci√≥n para verificar canales de Android
export async function checkAndroidChannels() {
  try {
    const { Platform } = await import('react-native');
    if (Platform.OS === 'android') {
      const { getNotificationChannelsAsync } = await import('expo-notifications');
      const channels = await getNotificationChannelsAsync();
      
      console.log('üì± Canales de Android:', channels.length);
      return channels.length > 0;
    }
    return true; // iOS no usa canales
  } catch (error: any) {
    console.error('‚ùå Error verificando canales:', error);
    return false;
  }
}

// Funci√≥n para probar base de datos
export async function testDatabase() {
  console.log('üóÑÔ∏è Probando base de datos...');
  
  try {
    const result = await testDatabaseConnection();
    console.log('‚úÖ Prueba de base de datos completada');
    return result;
  } catch (error: any) {
    console.error('‚ùå Error en prueba de base de datos:', error);
    throw error;
  }
}

// Funci√≥n para verificar salud de la base de datos
export async function checkDatabaseHealthStatus() {
  console.log('üè• Verificando salud de la base de datos...');
  
  try {
    const result = await checkDatabaseHealth();
    console.log('‚úÖ Verificaci√≥n de salud completada');
    return result;
  } catch (error: any) {
    console.error('‚ùå Error verificando salud de la base de datos:', error);
    throw error;
  }
}

// Funci√≥n para probar carga de perfil
export async function testProfile() {
  console.log('üë§ Probando carga de perfil...');
  
  try {
    const result = await testProfileLoading();
    console.log('‚úÖ Prueba de perfil completada');
    return result;
  } catch (error: any) {
    console.error('‚ùå Error en prueba de perfil:', error);
    throw error;
  }
}

// Funci√≥n para verificar campos del perfil
export async function checkProfileFieldsStatus() {
  console.log('üîç Verificando campos del perfil...');
  
  try {
    const result = await checkProfileFields();
    console.log('‚úÖ Verificaci√≥n de campos completada');
    return result;
  } catch (error: any) {
    console.error('‚ùå Error verificando campos del perfil:', error);
    throw error;
  }
}



// Funci√≥n para obtener estad√≠sticas del sistema
export async function getSystemStats() {
  try {
    console.log('üìä Obteniendo estad√≠sticas del sistema...');
    
    const stats: Record<string, any> = {
      local: null,
      api: null,
      health: null,
      permissions: null,
      channels: null,
      database: null
    };

    // Estad√≠sticas locales
    const localNotifications = await getScheduledNotifications();
    stats.local = {
      scheduled: localNotifications.length,
      types: localNotifications.reduce((acc: Record<string, number>, notif) => {
        const type = (notif.content?.data?.type as string) || 'unknown';
        acc[type] = (acc[type] || 0) + 1;
        return acc;
      }, {} as Record<string, number>)
    };

    // Estad√≠sticas de la API
    try {
      stats.api = await notificationService.getStats();
    } catch (error: any) {
      console.log('‚ö†Ô∏è No se pudieron obtener estad√≠sticas de la API:', error.message);
    }

    // Estado de salud
    try {
      stats.health = await notificationService.checkHealth();
    } catch (error: any) {
      console.log('‚ö†Ô∏è No se pudo verificar salud del sistema:', error.message);
    }

    // Permisos
    stats.permissions = await checkNotificationPermissions();

    // Canales (Android)
    stats.channels = await checkAndroidChannels();

    // Base de datos
    try {
      stats.database = await checkDatabaseHealth();
    } catch (error: any) {
      console.log('‚ö†Ô∏è No se pudo verificar salud de la base de datos:', error.message);
    }

    console.log('‚úÖ Estad√≠sticas del sistema obtenidas');
    return stats;

  } catch (error: any) {
    console.error('‚ùå Error obteniendo estad√≠sticas:', error);
    throw error;
  }
}

// Funci√≥n para descubrir endpoints disponibles
export async function discoverEndpoints(token?: string) {
  console.log('üîç Descubriendo endpoints disponibles...');
  
  try {
    await runFullDiscovery(token);
    console.log('‚úÖ Descubrimiento de endpoints completado');
  } catch (error: any) {
    console.error('‚ùå Error descubriendo endpoints:', error);
    throw error;
  }
}

// Funci√≥n para obtener lista de endpoints disponibles
export async function getAvailableEndpointsList(token?: string) {
  console.log('üìã Obteniendo lista de endpoints disponibles...');
  
  try {
    const endpoints = await getAvailableEndpoints(token);
    console.log('‚úÖ Lista de endpoints obtenida');
    return endpoints;
  } catch (error: any) {
    console.error('‚ùå Error obteniendo lista de endpoints:', error);
    throw error;
  }
}
