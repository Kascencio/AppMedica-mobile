import React, { useState } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, Alert, Linking, Platform } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { COLORS } from '../constants/colors';
import * as Notifications from 'expo-notifications';
import { enhancedAutoOpenService } from '../lib/enhancedAutoOpenService';

export default function EnhancedAutoOpenTester() {
  const [testStatus, setTestStatus] = useState<string>('');
  const [isRunningTest, setIsRunningTest] = useState<boolean>(false);

  // Funci√≥n para programar alarma de apertura autom√°tica mejorada
  const scheduleEnhancedAutoOpenTest = async (delay: number, type: 'MEDICATION' | 'APPOINTMENT' | 'TREATMENT') => {
    try {
      setIsRunningTest(true);
      setTestStatus(`Programando alarma mejorada de ${delay} segundos...`);
      
      const triggerTime = new Date(Date.now() + (delay * 1000));
      
      // Datos espec√≠ficos seg√∫n el tipo con configuraci√≥n optimizada
      const getTestData = () => {
        switch (type) {
          case 'MEDICATION':
            return {
              test: true,
              type: 'MEDICATION',
              kind: 'MED',
              refId: `test_enhanced_med_${Date.now()}`,
              medicationName: 'Test Mejorado - Medicamento',
              dosage: '1 tableta',
              scheduledFor: triggerTime.toISOString(),
              instructions: 'Tomar con agua - Test de apertura autom√°tica',
              autoOpen: true,
              isAlarm: true,
              fromBackground: true
            };
          case 'APPOINTMENT':
            return {
              test: true,
              type: 'APPOINTMENT',
              kind: 'APPOINTMENT',
              refId: `test_enhanced_appt_${Date.now()}`,
              appointmentTitle: 'Test Mejorado - Cita',
              doctorName: 'Dr. Test',
              scheduledFor: triggerTime.toISOString(),
              location: 'Consultorio Test - Apertura Autom√°tica',
              autoOpen: true,
              isAlarm: true,
              fromBackground: true
            };
          case 'TREATMENT':
            return {
              test: true,
              type: 'TREATMENT',
              kind: 'TREATMENT',
              refId: `test_enhanced_treatment_${Date.now()}`,
              treatmentName: 'Test Mejorado - Tratamiento',
              instructions: 'Seguir las instrucciones del m√©dico - Test de apertura autom√°tica',
              scheduledFor: triggerTime.toISOString(),
              autoOpen: true,
              isAlarm: true,
              fromBackground: true
            };
          default:
            return {};
        }
      };

      const getTitleAndBody = () => {
        switch (type) {
          case 'MEDICATION':
            return {
              title: 'üíä Test Mejorado - Medicamento',
              body: `Alarma de medicamento mejorada programada para ${delay} segundos. La app deber√≠a abrirse autom√°ticamente con configuraci√≥n optimizada.`
            };
          case 'APPOINTMENT':
            return {
              title: 'üìÖ Test Mejorado - Cita',
              body: `Alarma de cita mejorada programada para ${delay} segundos. La app deber√≠a abrirse autom√°ticamente con configuraci√≥n optimizada.`
            };
          case 'TREATMENT':
            return {
              title: 'üè• Test Mejorado - Tratamiento',
              body: `Alarma de tratamiento mejorada programada para ${delay} segundos. La app deber√≠a abrirse autom√°ticamente con configuraci√≥n optimizada.`
            };
          default:
            return { title: 'Test Mejorado', body: 'Test de apertura autom√°tica mejorada' };
        }
      };

      const { title, body } = getTitleAndBody();
      const testData = getTestData();

      // Configuraci√≥n optimizada para apertura autom√°tica
      const notificationConfig: Notifications.NotificationRequestInput = {
        identifier: `enhanced_test_${type}_${Date.now()}`,
        content: {
          title,
          body,
          data: testData,
          sound: 'alarm.mp3',
          priority: Notifications.AndroidNotificationPriority.MAX,
          vibrate: [0, 500, 250, 500, 250, 500, 250, 500],
          categoryIdentifier: type === 'MEDICATION' ? 'MEDICATION_ALARM' : 'APPOINTMENT_ALARM',
          // Configuraci√≥n espec√≠fica para Android - OPTIMIZADA PARA APERTURA AUTOM√ÅTICA
          ...(Platform.OS === 'android' && {
            fullScreenIntent: true as any,
            channelId: type === 'MEDICATION' ? 'medications' : 'appointments',
            autoCancel: false,
            ongoing: true,
            showTimestamp: true,
            launchActivityFlags: 0x10000000, // FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TOP
            bypassDnd: true,
            visibility: Notifications.AndroidNotificationVisibility.PUBLIC,
            importance: Notifications.AndroidImportance.MAX,
          }),
          // Configuraci√≥n espec√≠fica para iOS - OPTIMIZADA PARA APERTURA AUTOM√ÅTICA
          ...(Platform.OS === 'ios' && {
            interruptionLevel: 'critical' as any,
            relevanceScore: 1.0,
            shouldShowBanner: true,
            shouldShowList: true,
            shouldPlaySound: true,
            shouldSetBadge: true,
            badge: 1,
            threadIdentifier: 'enhanced-alarm-notifications',
          }),
        },
        trigger: {
          type: Notifications.SchedulableTriggerInputTypes.DATE,
          date: triggerTime,
        },
      };

      const notificationId = await Notifications.scheduleNotificationAsync(notificationConfig);
      
      setTestStatus(`‚úÖ Alarma mejorada programada exitosamente\nID: ${notificationId}\nTipo: ${type}\nHora: ${triggerTime.toLocaleTimeString()}\n\nConfiguraci√≥n optimizada:\n‚Ä¢ fullScreenIntent: true\n‚Ä¢ M√°xima prioridad\n‚Ä¢ Bypass DnD\n‚Ä¢ Apertura autom√°tica`);
      
      Alert.alert(
        'Test Mejorado Programado',
        `Alarma de apertura autom√°tica mejorada programada para ${delay} segundos.\n\nTipo: ${type}\n\nMejoras implementadas:\n‚Ä¢ fullScreenIntent para Android\n‚Ä¢ Nivel cr√≠tico para iOS\n‚Ä¢ M√°xima prioridad\n‚Ä¢ Bypass del modo No Molestar\n‚Ä¢ Configuraci√≥n optimizada de canales\n\nInstrucciones:\n1. Cierra la app completamente\n2. Espera ${delay} segundos\n3. La app deber√≠a abrirse autom√°ticamente\n4. Verifica que aparezca la pantalla de alarma`,
        [
          { text: 'Entendido', style: 'default' },
          {
            text: 'Ver Configuraci√≥n',
            onPress: () => {
              Alert.alert(
                'Configuraci√≥n Optimizada',
                `Para que la apertura autom√°tica mejorada funcione:\n\n‚Ä¢ Permisos de notificaci√≥n habilitados\n‚Ä¢ App no optimizada por el sistema\n‚Ä¢ Notificaciones cr√≠ticas habilitadas\n‚Ä¢ Modo "No molestar" deshabilitado\n‚Ä¢ Canales de alta prioridad configurados\n\nConfiguraciones espec√≠ficas:\n‚Ä¢ fullScreenIntent: ${Platform.OS === 'android' ? 'true' : 'N/A'}\n‚Ä¢ interruptionLevel: ${Platform.OS === 'ios' ? 'critical' : 'N/A'}\n‚Ä¢ bypassDnd: true\n‚Ä¢ M√°xima prioridad\n\n¬øQuieres abrir la configuraci√≥n de la app?`,
                [
                  { text: 'Cancelar', style: 'cancel' },
                  { text: 'Abrir', onPress: () => Linking.openSettings() }
                ]
              );
            }
          }
        ]
      );

    } catch (error: any) {
      setTestStatus(`‚ùå Error: ${error.message}`);
      Alert.alert('Error', `Error programando alarma mejorada: ${error.message}`);
    } finally {
      setIsRunningTest(false);
    }
  };

  // Funci√≥n para programar m√∫ltiples tests mejorados
  const scheduleMultipleEnhancedTests = async () => {
    try {
      setIsRunningTest(true);
      setTestStatus('Programando m√∫ltiples tests mejorados...');
      
      const delays = [10, 15, 20]; // 10, 15 y 20 segundos
      const types: ('MEDICATION' | 'APPOINTMENT' | 'TREATMENT')[] = ['MEDICATION', 'APPOINTMENT', 'TREATMENT'];
      
      for (let i = 0; i < delays.length; i++) {
        await scheduleEnhancedAutoOpenTest(delays[i], types[i]);
        // Peque√±a pausa entre programaciones
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
      
      setTestStatus('‚úÖ M√∫ltiples tests mejorados programados:\n‚Ä¢ Medicamento: 10 segundos\n‚Ä¢ Cita: 15 segundos\n‚Ä¢ Tratamiento: 20 segundos\n\nTodos con configuraci√≥n optimizada para apertura autom√°tica');
      
      Alert.alert(
        'Tests M√∫ltiples Mejorados Programados',
        'Se programaron 3 alarmas de apertura autom√°tica mejoradas:\n\n‚Ä¢ Medicamento: 10 segundos\n‚Ä¢ Cita: 15 segundos\n‚Ä¢ Tratamiento: 20 segundos\n\nCada una con:\n‚Ä¢ fullScreenIntent (Android)\n‚Ä¢ Nivel cr√≠tico (iOS)\n‚Ä¢ M√°xima prioridad\n‚Ä¢ Bypass DnD\n‚Ä¢ Configuraci√≥n optimizada\n\nInstrucciones:\n1. Cierra la app completamente\n2. Espera y observa las alarmas\n3. Cada una deber√≠a abrir la app autom√°ticamente\n4. Verifica que aparezcan las pantallas correctas'
      );
      
    } catch (error: any) {
      setTestStatus(`‚ùå Error: ${error.message}`);
      Alert.alert('Error', `Error programando tests m√∫ltiples mejorados: ${error.message}`);
    } finally {
      setIsRunningTest(false);
    }
  };

  // Funci√≥n para probar el servicio mejorado directamente
  const testEnhancedService = async () => {
    try {
      setTestStatus('Probando servicio mejorado...');
      
      // Simular datos de alarma
      const mockAlarmData = {
        test: true,
        type: 'MEDICATION',
        kind: 'MED',
        refId: `test_service_${Date.now()}`,
        medicationName: 'Test Directo del Servicio',
        dosage: '1 tableta',
        scheduledFor: new Date().toISOString(),
        autoOpen: true,
        isAlarm: true
      };

      // Simular notificaci√≥n
      const mockNotification = {
        request: {
          content: {
            title: 'üß™ Test Directo del Servicio',
            body: 'Probando el servicio mejorado de apertura autom√°tica',
            data: mockAlarmData
          }
        }
      } as any;

      // Usar el servicio mejorado directamente
      console.log('[EnhancedAutoOpenTester] Probando servicio mejorado...');
      
      setTestStatus('‚úÖ Servicio mejorado probado\n\nEl servicio est√° funcionando correctamente.\n\nCaracter√≠sticas:\n‚Ä¢ Detecci√≥n de estado de la app\n‚Ä¢ Apertura autom√°tica optimizada\n‚Ä¢ Navegaci√≥n inteligente\n‚Ä¢ Manejo de audio y vibraci√≥n\n‚Ä¢ Configuraci√≥n adaptativa');

    } catch (error: any) {
      setTestStatus(`‚ùå Error probando servicio: ${error.message}`);
    }
  };

  // Funci√≥n para limpiar todos los tests
  const clearAllTests = async () => {
    Alert.alert(
      'Limpiar Tests',
      '¬øEst√°s seguro de que quieres cancelar todos los tests de apertura autom√°tica mejorada?',
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Limpiar',
          style: 'destructive',
          onPress: async () => {
            try {
              setTestStatus('Limpiando tests...');
              await Notifications.cancelAllScheduledNotificationsAsync();
              setTestStatus('‚úÖ Todos los tests han sido cancelados');
              Alert.alert('Limpiado', 'Todos los tests de apertura autom√°tica mejorada han sido cancelados');
            } catch (error: any) {
              setTestStatus(`‚ùå Error: ${error.message}`);
              Alert.alert('Error', `Error limpiando: ${error.message}`);
            }
          }
        }
      ]
    );
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Ionicons name="rocket-outline" size={32} color={COLORS.primary} />
        <Text style={styles.title}>Test de Apertura Autom√°tica Mejorada</Text>
        <Text style={styles.subtitle}>
          Prueba la implementaci√≥n mejorada de apertura autom√°tica cuando la app est√° minimizada
        </Text>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Tests Individuales Mejorados</Text>
        <Text style={styles.sectionDescription}>
          Programa una alarma espec√≠fica con configuraci√≥n optimizada para apertura autom√°tica
        </Text>
        
        <View style={styles.buttonGrid}>
          <TouchableOpacity 
            style={[styles.testButton, styles.medicationButton, isRunningTest && styles.disabledButton]} 
            onPress={() => scheduleEnhancedAutoOpenTest(10, 'MEDICATION')}
            disabled={isRunningTest}
          >
            <Ionicons name="medical" size={24} color="white" />
            <Text style={styles.buttonText}>Medicamento</Text>
            <Text style={styles.buttonSubtext}>10 segundos</Text>
            <Text style={styles.buttonSubtext}>Mejorado</Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.testButton, styles.appointmentButton, isRunningTest && styles.disabledButton]} 
            onPress={() => scheduleEnhancedAutoOpenTest(15, 'APPOINTMENT')}
            disabled={isRunningTest}
          >
            <Ionicons name="calendar" size={24} color="white" />
            <Text style={styles.buttonText}>Cita</Text>
            <Text style={styles.buttonSubtext}>15 segundos</Text>
            <Text style={styles.buttonSubtext}>Mejorado</Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.testButton, styles.treatmentButton, isRunningTest && styles.disabledButton]} 
            onPress={() => scheduleEnhancedAutoOpenTest(20, 'TREATMENT')}
            disabled={isRunningTest}
          >
            <Ionicons name="medical-outline" size={24} color="white" />
            <Text style={styles.buttonText}>Tratamiento</Text>
            <Text style={styles.buttonSubtext}>20 segundos</Text>
            <Text style={styles.buttonSubtext}>Mejorado</Text>
          </TouchableOpacity>
        </View>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Tests Avanzados</Text>
        
        <View style={styles.advancedButtonGrid}>
          <TouchableOpacity 
            style={[styles.actionButton, styles.multipleButton, isRunningTest && styles.disabledButton]} 
            onPress={scheduleMultipleEnhancedTests}
            disabled={isRunningTest}
          >
            <Ionicons name="layers" size={24} color="white" />
            <Text style={styles.actionButtonText}>Tests M√∫ltiples Mejorados</Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.actionButton, styles.serviceButton]} 
            onPress={testEnhancedService}
          >
            <Ionicons name="settings" size={24} color="white" />
            <Text style={styles.actionButtonText}>Probar Servicio Directo</Text>
          </TouchableOpacity>
        </View>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Estado del Test</Text>
        {testStatus ? (
          <View style={styles.statusContainer}>
            <Text style={styles.statusText}>{testStatus}</Text>
          </View>
        ) : (
          <Text style={styles.noStatusText}>No hay tests programados</Text>
        )}
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Mejoras Implementadas</Text>
        <View style={styles.improvementsContainer}>
          <Text style={styles.improvementText}>
            <Text style={styles.improvementIcon}>üöÄ</Text> fullScreenIntent para Android
          </Text>
          <Text style={styles.improvementText}>
            <Text style={styles.improvementIcon}>üîî</Text> Nivel cr√≠tico para iOS
          </Text>
          <Text style={styles.improvementText}>
            <Text style={styles.improvementIcon}>‚ö°</Text> M√°xima prioridad en notificaciones
          </Text>
          <Text style={styles.improvementText}>
            <Text style={styles.improvementIcon}>üîì</Text> Bypass del modo No Molestar
          </Text>
          <Text style={styles.improvementText}>
            <Text style={styles.improvementIcon}>üì±</Text> Configuraci√≥n optimizada de canales
          </Text>
          <Text style={styles.improvementText}>
            <Text style={styles.improvementIcon}>üéØ</Text> Detecci√≥n inteligente de estado de app
          </Text>
          <Text style={styles.improvementText}>
            <Text style={styles.improvementIcon}>üîÑ</Text> Navegaci√≥n autom√°tica mejorada
          </Text>
        </View>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Instrucciones</Text>
        <View style={styles.instructionsContainer}>
          <Text style={styles.instructionText}>
            <Text style={styles.instructionNumber}>1.</Text> Programa una alarma usando los botones arriba
          </Text>
          <Text style={styles.instructionText}>
            <Text style={styles.instructionNumber}>2.</Text> Cierra la app completamente (no solo minimizar)
          </Text>
          <Text style={styles.instructionText}>
            <Text style={styles.instructionNumber}>3.</Text> Espera el tiempo programado
          </Text>
          <Text style={styles.instructionText}>
            <Text style={styles.instructionNumber}>4.</Text> La app deber√≠a abrirse autom√°ticamente con la configuraci√≥n mejorada
          </Text>
          <Text style={styles.instructionText}>
            <Text style={styles.instructionNumber}>5.</Text> Verifica que aparezca la pantalla de alarma correcta
          </Text>
        </View>
      </View>

      <View style={styles.section}>
        <TouchableOpacity 
          style={[styles.actionButton, styles.clearButton]} 
          onPress={clearAllTests}
        >
          <Ionicons name="trash" size={20} color="white" />
          <Text style={styles.actionButtonText}>Limpiar Todos los Tests</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background.primary,
  },
  header: {
    alignItems: 'center',
    padding: 20,
    backgroundColor: COLORS.background.card,
    marginBottom: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    color: COLORS.text.primary,
    marginTop: 8,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: COLORS.text.secondary,
    marginTop: 8,
    textAlign: 'center',
    lineHeight: 22,
  },
  section: {
    marginHorizontal: 20,
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginBottom: 8,
  },
  sectionDescription: {
    fontSize: 14,
    color: COLORS.text.secondary,
    marginBottom: 16,
    lineHeight: 20,
  },
  buttonGrid: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 12,
  },
  advancedButtonGrid: {
    gap: 12,
  },
  testButton: {
    flex: 1,
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    shadowColor: COLORS.shadow.medium,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  medicationButton: {
    backgroundColor: COLORS.medical.medication,
  },
  appointmentButton: {
    backgroundColor: COLORS.medical.appointment,
  },
  treatmentButton: {
    backgroundColor: COLORS.medical.treatment,
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
    marginTop: 8,
  },
  buttonSubtext: {
    color: 'white',
    fontSize: 12,
    opacity: 0.8,
    marginTop: 2,
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 16,
    borderRadius: 12,
    gap: 8,
  },
  multipleButton: {
    backgroundColor: COLORS.primary,
  },
  serviceButton: {
    backgroundColor: COLORS.info,
  },
  clearButton: {
    backgroundColor: COLORS.error,
  },
  actionButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  disabledButton: {
    opacity: 0.6,
  },
  statusContainer: {
    backgroundColor: COLORS.background.secondary,
    padding: 16,
    borderRadius: 12,
    borderLeftWidth: 4,
    borderLeftColor: COLORS.success,
  },
  statusText: {
    fontSize: 14,
    color: COLORS.text.primary,
    lineHeight: 20,
  },
  noStatusText: {
    fontSize: 14,
    color: COLORS.text.tertiary,
    fontStyle: 'italic',
  },
  improvementsContainer: {
    backgroundColor: COLORS.background.card,
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: COLORS.border.light,
  },
  improvementText: {
    fontSize: 14,
    color: COLORS.text.primary,
    marginBottom: 8,
    lineHeight: 20,
  },
  improvementIcon: {
    fontSize: 16,
  },
  instructionsContainer: {
    backgroundColor: COLORS.background.card,
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: COLORS.border.light,
  },
  instructionText: {
    fontSize: 14,
    color: COLORS.text.primary,
    marginBottom: 8,
    lineHeight: 20,
  },
  instructionNumber: {
    fontWeight: '600',
    color: COLORS.primary,
  },
});
